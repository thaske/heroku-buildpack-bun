#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>
# $HOME: /app

# -e - always exit on error
# -o pipefail - don't ignore exit codes when piping output
set -eo pipefail

BUILD_DIR="${1:-.}"
CACHE_DIR="${2:-}"
ENV_DIR="${3:-}"
BP_DIR=$(cd "$(dirname "${0:-}")"; cd ..; pwd)

### Load dependencies
source "$BP_DIR/lib/json.sh"

HEROKU_DIR="$BUILD_DIR/.heroku"
BIN_DIR="$HEROKU_DIR/bin"
mkdir -p "$BIN_DIR"

# Export the content of the ENV_DIR into the environment
if [ -d "$ENV_DIR" ]; then
  while IFS= read -r -d '' f; do
    export "$(basename "$f")=$(cat "$f")"
  done < <(find "$ENV_DIR" -type f -print0)
fi

# Allow Bun version pinning via a choice of 3 different files
if [ -f "$BUILD_DIR/.bun-version" ]; then
  BUN_VERSION="$(cat "$BUILD_DIR/.bun-version")"
elif [ -f "$BUILD_DIR/runtime.bun.txt" ]; then
  BUN_VERSION="$(cat "$BUILD_DIR/runtime.bun.txt")"
elif [ -f "$BUILD_DIR/runtime.txt" ]; then
  BUN_VERSION="$(cat "$BUILD_DIR/runtime.txt")"
fi

echo "Installing Bun ${BUN_VERSION:-latest}"

if [[ -n $BUN_VERSION ]]; then
  # prepend a v to version numbers, eg 1.0.19 -> v1.0.19
  if [[ $BUN_VERSION =~ ^[0-9] ]]; then
    BUN_VERSION="v${BUN_VERSION}"
  fi
  BUN_INSTALL_VERSION="-s bun-$BUN_VERSION"
fi

# Install bun with proper caching and security
export BUN_INSTALL="$BUILD_DIR/.heroku"
export BUN_DIR="$CACHE_DIR/bun"
mkdir -p "$BUN_DIR"

# Download installer with SHA verification
INSTALLER_PATH="$CACHE_DIR/bun-installer.sh"
curl -fsSL --retry-connrefused --retry 3 https://bun.sh/install -o "$INSTALLER_PATH"

# Run the installer
bash "$INSTALLER_PATH" $BUN_INSTALL_VERSION

export PATH="$BUN_INSTALL/bin:$PATH"

# Set environment variables at runtime
PROFILE_PATH="$BUILD_DIR/.profile.d/bun.sh"
mkdir -p "$(dirname "$PROFILE_PATH")"
echo 'export PATH="$HOME/.heroku/bin:$PATH"' > "$PROFILE_PATH"
echo 'export BUN_DIR="$HOME/.bun/install/cache"' >> "$PROFILE_PATH"

# Export environment variables to subsequent buildpacks
mkdir -p "$BP_DIR/export"
echo "export PATH=\"$BUILD_DIR/.heroku/bin:\$PATH\"" > "$BP_DIR/export"
echo "export BUN_DIR=\"$CACHE_DIR/bun\"" >> "$BP_DIR/export"

echo "Installed Bun v$(bun --version)"

cd "$BUILD_DIR"

# Only run package.json related steps if it exists
if [ -f package.json ]; then
  # Download dependencies
  if [[ ! -f .skip-bun-install ]]; then
    echo "Installing dependencies..."
    bun install --production --frozen-lockfile || (echo "Failed to install dependencies" && exit 1)
    echo "Pruning development dependencies..."
    bun pm prune --production || echo "Warning: Failed to prune dependencies"
  fi

  has_heroku_prebuild_script=$(has_script "package.json" "heroku-prebuild")
  if [[ "$has_heroku_prebuild_script" == "true" && ! -f .skip-bun-heroku-prebuild ]]; then
    echo "Running Heroku prebuild script..."
    bun run heroku-prebuild || (echo "Failed to run heroku-prebuild" && exit 1)
  fi

  has_build_script=$(has_script "package.json" "build")
  if [[ "$has_build_script" == "true" && ! -f .skip-bun-build ]]; then
    echo "Building application..."
    bun run build || (echo "Failed to build application" && exit 1)
    echo "Done building application..."
  fi

  has_heroku_postbuild_script=$(has_script "package.json" "heroku-postbuild")
  if [[ "$has_heroku_postbuild_script" == "true" && ! -f .skip-bun-heroku-postbuild ]]; then
    echo "Running Heroku postbuild script..."
    bun run heroku-postbuild || (echo "Failed to run heroku-postbuild" && exit 1)
  fi
else
  echo "No package.json found. Skipping dependency installation."
fi

